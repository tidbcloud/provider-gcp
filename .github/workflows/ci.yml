name: CI

# This job will only be triggered when a PR is merged to `pingcap/provider-gcp` branch 
# or a tag is pushed.
on:
  push:
    branches:
      - pingcap/provider-gcp
    tags:
      - "*"

env:
  GO_VERSION: '1.14'
  GCR_REG: gcr.io/pingcap-public/crossplane
  PROJECT_ID: pingcap-public
  IMAGE_NAME: provider-gcp
  # set the commit id as default value
  IMAGE_TAG: ${{ github.sha }}

jobs:
  push-the-image:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Build the binary
        working-directory: ./
        run: GOOS=linux go build -o docker/crossplane-gcp-provider cmd/provider/main.go
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.PUB_GCR_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: truea

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        run: |
          gcloud auth configure-docker -q

      - name: Get tag name if any
        uses: olegtarasov/get-tag@v2.1
        id: tagName
      
      - name: Update the image tag, use the tag name as the image tag
        if: steps.tagName.outputs.tag != ''
        run: |
          echo ${{ steps.tagName.outputs.tag }} >> $IMAGE_TAG

      - name: Build docker image
        run: |-
          cd docker && docker build -t ${{ env.GCR_REG }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      
      - name: Push the image to GCR
        run: |
          docker push ${{ env.GCR_REG }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}